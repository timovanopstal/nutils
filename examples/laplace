#! /usr/bin/env python

from nutils import *


@parallel.fork
def makeplots( domain, geom, sol, index ):

  log.context( 'plots' )

  points, colors = domain.elem_eval( [ geom, sol ], ischeme='bezier4', separate=True )
  with plot.PyPlot( 'solution', index=index ) as plt:
    plt.mesh( points, colors, triangulate='bezier' )
    plt.colorbar()
    plt.xlim( 0, .5*numeric.pi )
    plt.ylim( 0, .5*numeric.pi )


def main( nelems=8, degree=1, beltrami=False ):

  verts = numeric.linspace( 0, .5*numeric.pi, nelems+1 )
  domain, geom = mesh.rectilinear( [verts,verts] )
  #domain, geom = mesh.demo( xmax=.5*numeric.pi, ymax=.5*numeric.pi )
  x, y = geom
  exact = function.sin(x) * function.exp(y)
  funcsp = domain.splinefunc( degree=degree )
  if beltrami:
    geom = function.concatenate([ geom, (x**2-y**2)[_] ])

  laplace = function.outer( funcsp.grad(geom,ndims=2) ).sum()
  matrix = domain.integrate( laplace, geometry=geom, ischeme='gauss4', title='matrix' )
  tmp = funcsp * numeric.exp(.5*numeric.pi) * function.sin(x)
  rhs = domain.boundary['top'].integrate( tmp, geometry=geom, ischeme='gauss6', title='rhs' )
  cons = domain.boundary['left,bottom'].project( function.sin(x), ischeme='gauss6', geometry=geom, onto=funcsp, title='left,bottom edge' )
  lhs = matrix.solve( rhs, constrain=cons, tol=1e-8, symmetric=True )
  sol = funcsp.dot(lhs)

  makeplots( domain, geom[:2], sol, nelems )
  error = sol - exact
  err = numeric.sqrt( domain.integrate( [ error**2, ( error.grad(geom,ndims=2)**2 ).sum() ], geometry=geom, ischeme='gauss6', title='computing error' ) )
  log.info( 'errors: l2=%f, h1=%f' % tuple(err) )

  return err


def conv( degree=1, niter=4 ):

  l2err, h1err = zip( *[ main( nelems=2**i, degree=degree ) for i in util.iterate( 'refine', niter ) ] )
  h = (.25*numeric.pi) * .5**numeric.arange(niter)

  with plot.PyPlot( 'convergence' ) as plt:
    plt.subplot( 211 )
    plt.loglog( h, l2err, 'k*--' )
    plt.slope_triangle( h, l2err )
    plt.ylabel( 'L2 error' )
    plt.grid( True )
    plt.subplot( 212 )
    plt.loglog( h, h1err, 'k*--' )
    plt.slope_triangle( h, h1err )
    plt.ylabel( 'H1 error' )
    plt.grid( True )


util.run( main, conv )
