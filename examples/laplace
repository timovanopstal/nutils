#! /usr/bin/env python

from nutils import *


@log.title
def makeplots( domain, geom, sol, index ):

  points, colors = domain.elem_eval( [ geom, sol ], ischeme='bezier4', separate=True )
  with plot.PyPlot( 'solution', index=index ) as plt:
    plt.mesh( points, colors, triangulate='bezier' )
    plt.colorbar()
    plt.xlim( 0, .5*numpy.pi )
    plt.ylim( 0, .5*numpy.pi )


def main( nelems=None, degree=1, plots=True, solvetol=1e-10 ):

  if nelems:
    verts = numpy.linspace( 0, .5*numpy.pi, nelems+1 )
    domain, geom = mesh.rectilinear( [verts,verts] )
  else:
    domain, geom = mesh.demo( xmax=.5*numpy.pi, ymax=.5*numpy.pi )
    if degree != 1:
      log.warning( 'setting degree=1 for triangular mesh' )
      degree = 1

  x, y = geom
  exact = function.sin(x) * function.exp(y)
  flux = numpy.exp(.5*numpy.pi) * function.sin(x)
  dirichlet = function.sin(x)

  funcsp = domain.splinefunc( degree=degree )
  laplace = function.outer( funcsp.grad(geom) ).sum()
  matrix = domain.integrate( laplace, geometry=geom, ischeme='gauss4', title='matrix' )
  rhs = domain.boundary['top'].integrate( funcsp * flux, geometry=geom, ischeme='gauss6', title='rhs' )
  cons = domain.boundary['left,bottom'].project( dirichlet, ischeme='gauss6', geometry=geom, onto=funcsp, title='left,bottom edge' )
  lhs = matrix.solve( rhs, constrain=cons, tol=solvetol, symmetric=True )
  sol = funcsp.dot(lhs)

  if plots:
    makeplots( domain.refined, geom, sol, nelems )

  error = sol - exact
  err = numpy.sqrt( domain.integrate( [ error**2, ( error.grad(geom)**2 ).sum() ], geometry=geom, ischeme='gauss6', title='computing error' ) )
  log.user( 'errors: l2=%f, h1=%f' % tuple(err) )

  return err, rhs, cons, lhs


def conv( degree=1, nrefine=4 ):

  l2err = []
  h1err = []

  for irefine in log.range( 'refine', nrefine ):
    err, rhs, cons, lhs = main( nelems=2**irefine, degree=degree )
    l2err.append( err[0] )
    h1err.append( err[1] )

  h = (.25*numpy.pi) * .5**numpy.arange(nrefine)

  with plot.PyPlot( 'convergence' ) as plt:
    plt.subplot( 211 )
    plt.loglog( h, l2err, 'k*--' )
    plt.slope_triangle( h, l2err )
    plt.ylabel( 'L2 error' )
    plt.grid( True )
    plt.subplot( 212 )
    plt.loglog( h, h1err, 'k*--' )
    plt.slope_triangle( h, h1err )
    plt.ylabel( 'H1 error' )
    plt.grid( True )


def unittest():

  retvals = main( degree=1, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNqNUDkOwzAM+04CyIVu2c/p4DX/H2spTYa2QwEbommBpESwKZDtsG2uLrMZdHSbTWFx+AASjdkEGHlk
    TYqC35CdPHsX/PMs1eN5wK/bltcSjqXaLetJ4qDZvB5iIYnNRNI2uW6hFyYUzGSfysuUh2p+aYhXRa5W
    ViuezWs+Yqt5v8J4nJ53INOoPX2GGt4x6xWMJPvkDkdhdm7Ua43sKsWblPMO+wvOeV1C''' )

  retvals = main( nelems=4, degree=1, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNqdkM1uAzEIhF9nV2IjDz8GHqeHveb9jzWkWzVpTpFsDfoww8igTQm207ax5jgPI3VdqrTYuNHvAbMX
    /ssc8o9BkOchz8xZXlkK288aS5nn4XTAElUox3ofCzBrFRNlmiThPXT/uj9dx5R3PMXiHcdAB3rlH4Wx
    6SgN8Q4BVi5zhM7SKxyGRnNTL2VOKxUFSq+wkNk/yIPbhzN7TtXa7woPjUcf0X1hbb+Fu7/T/g3BeW4p''' )

  retvals = main( nelems=4, degree=2, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNqlUUtuhTAMvA5ISeW/4+N0wfbdf1nbFKni8VaVQBNmxsFj49hkoO5j21DCjmmDhPyYOpKDr/H3MVQo
    5UZz8seUO41AcUx+o1XwicbgB9pIou7OZiYFZ6UPZI7CqQh5WNnxiRNNuA6unhFiYARU9ev79faqGX/S
    llT9sxYR65OGAFAhnrT/JSD27pYVrVAJukN3xMJQ6+8rlbk1nx31tFFWj5ewlpzopIVXUgSk0xe9NEpj
    IdNqv4Cvwiv9tS70+m/6DVvn5ad/QddfE0m//PrXze+nH9u3j/0HiSeZcA==''' )


util.run( main, conv, unittest )
