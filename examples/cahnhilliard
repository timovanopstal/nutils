#! /usr/bin/env python

from nutils import *


@log.title
def makeplots( domain, geom, c, psi, index ):

  force = c * psi.grad(geom)
  xpnt, cpnt = domain.elem_eval( [ geom, c ], ischeme='bezier5', title='mesh', separate=True )
  xy, uv = domain.elem_eval( [ geom, force ], ischeme='uniform1', title='quiver', separate=False )

  with plot.PyPlot( 'concentration', ndigits=4, index=index ) as plt:
    plt.mesh( xpnt, cpnt )
    plt.colorbar()
    plt.quiver( xy[:,0], xy[:,1], uv[:,0], uv[:,1], pivot='middle' )
    plt.xlim( 0, 1 )
    plt.ylim( 0, 1 )


def main( nelems=40, epsilon=None, timestep=.01, init='random', mean=-.3, std=.1, tol=1e-5, maxiter=-1, plot=True ):

  mineps = 2./nelems
  if epsilon is None:
    log.info( 'setting epsilon=%f' % mineps )
    epsilon = mineps
  elif epsilon < mineps:
    log.warning( 'epsilon under crititical threshold: %f < %f' % ( epsilon, mineps ) )

  xnodes = ynodes = numpy.linspace(0,1,nelems+1)
  domain, geom = mesh.rectilinear( [ xnodes, ynodes ], periodic=[0] )
  funcsp = domain.splinefunc( degree=3, neumann=(2,3), removedofs=(None,(0,-1)) )

  psi_c = lambda c_: (1./epsilon) * (2*c_)
  psi_m = lambda c_: -epsilon * c_.laplace(geom)
  psi_e = lambda c_: (1./epsilon) * (c_**3-3*c_)

  psi = lambda c_: psi_c(c_) + psi_m(c_) + psi_e(c_)

  A = function.outer( funcsp ) \
    + timestep * function.outer( funcsp.grad(geom), psi_c(funcsp).grad(geom) ).sum() \
    - timestep * function.outer( funcsp.laplace(geom), psi_m(funcsp) )
  matrix = domain.integrate( A, geometry=geom, ischeme='gauss4' )

  if init == 'random':
    numpy.random.seed( 0 )
    c = funcsp.dot( numpy.random.normal( mean, std, funcsp.shape ) )
  elif init == 'sine':
    x, y = geom
    c = mean + (y-.5+.5*function.sin(x*2*numpy.pi)) * std
  else:
    raise Exception( 'unknown init %r' % init )

  for iiter in log.count( 'timestep' ):

    if plot:
      makeplots( domain, geom, c, psi(c), iiter )

    if iiter == maxiter:
      break

    b = funcsp * c - timestep * ( funcsp.grad(geom) * psi_e(c).grad(geom) ).sum()
    rhs, total = domain.integrate( [ b, c ], geometry=geom, ischeme='gauss4' )

    log.user( 'total concentration:', total )

    if iiter:
      res = matrix.res( lhs, rhs )
      log.info( 'residual:', res )
      if res < tol:
        break

    lhs = matrix.solve( rhs, tol=1e-10 )
    c = funcsp.dot( lhs )

  return iiter, lhs


def unittest():

  retvals = main( nelems=8, init='sine', mean=0, std=.1, maxiter=10, plot=False )
  assert debug.checkdata( retvals, '''
    eNqtkdsNBCEIRdvRBDY8VLCg6b+FzSBYwXyBgofLlaEN4NmhMUFDVx8PTkDbc0ayWCQSVTslVqIHFyhz
    tExf+kZb297oLCsaXZJhnjdz74TJCBj9oNKqVfN9fXk1AGsiloQrKTWW6NriruVkkqyhyaJ9WLQ4WK47
    WEP8sOwwiOLsQ+17XR9Z9en33UVzcywrsLzBa1aaV26WveV3h/4HtuWGNw==''' )


util.run( main, unittest )
