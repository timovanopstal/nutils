#! /usr/bin/env python

from nutils import *


@log.title
def makeplots( domain, geom, stress ):

  points, colors = domain.simplex.elem_eval( [ geom, stress[0,1] ], ischeme='bezier3', separate=True )
  with plot.PyPlot( 'stress', ndigits=0 ) as plt:
    plt.mesh( points, colors, triangulate='bezier' )
    plt.colorbar()
    plt.axis( 'equal' )
    plt.xlim( 0, 1.5 )


def main( nelems=None, maxrefine=2, degree=1, stress=library.Hooke(lmbda=1,mu=1), plots=True, solvetol=1e-5 ):

  if nelems:
    verts = numpy.linspace( 0, 1, nelems+1 )
    wholedomain, geom = mesh.rectilinear( [verts,verts] )
  else:
    wholedomain, geom = mesh.demo()
    if degree != 1:
      log.warning( 'setting degree=1 for triangular mesh' )
      degree = 1

  levelset = function.norm2( geom ) - .5
  domain, complement = wholedomain.trim( levelset, maxrefine=maxrefine )
  dspace = domain.splinefunc( degree=degree ).vector( 2 )

  support = domain.integrate( function.norm2( dspace ), geometry=geom, ischeme='gauss6' )
  cons = util.NanVec( len(support) )
  cons[ support==0 ] = 0
  cons |= domain.boundary['left,right'].project( geom*[.5,0], geometry=geom, ischeme='gauss6', onto=dspace )
  cons |= domain.boundary['right'].project( [.5,0], geometry=geom, ischeme='gauss6', onto=dspace )

  elasticity = function.outer( dspace.grad(geom), stress(dspace.symgrad(geom)) ).sum([2,3])
  matrix = domain.integrate( elasticity, geometry=geom, ischeme='gauss6' )
  lhs = matrix.solve( constrain=cons, tol=solvetol, symmetric=True, precon='diag' )
  disp = dspace.dot( lhs )

  if plots:
    makeplots( domain, geom+disp, stress(disp.symgrad(geom)) )

  return lhs, cons


def unittest():

  retvals = main( nelems=None, degree=2, maxrefine=2, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNp9UMsOwyAM+51WClPegc/ZYdf+/3ENsK2rukkgOwQ7BoJFgWyFZZHm9CgKhoiJQi6J7MyJVGvtyO6J
    eMtF1nBWym5J1Wo/Usc66rCj8QtVRL8GGs/BQ184aE/k6V3MbDczKII8SLByJxyjNQIVIbapEm2RHYqQ
    RJtaxaofBTX1WTFlVAPW1i/s/7Ldt3fC5Mc99JOdm+fn/jK6kP71vWyusD4BEutu9A==''' )

  retvals = main( nelems=4, degree=2, maxrefine=2, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNq9UTuOQzEIvM6LZK/4g4+T4rW5f7kPsJQUUbRpVrI1MDDGAI5DBuptHAcF4Dl5wE+eJbrOecUWQaKR
    0zl1iLunz7QkkVAqfknUwTMFF69NBao0BZzURFlVRJxLJqW50LgRmOr5XZ5xbcSd1+UlotERC9U3QumF
    qVAB4BukEHoOYTJIFK1WfUwS0zQ0/ArYIMbyp1EKrVVONYipGiuNJM2iSafgliyr3gisRquClmiIUD5S
    JaJIK5lhv0taVQU6g5mwEMJa4VV3IhG1tHaiu6/Xc63+cX9sJ6139yX0Ieuv99ul/Pf/3g3p9gswGceJ''' )

  retvals = main( nelems=4, degree=2, maxrefine=3, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNq9Uc1qhCEMfJ1d0JKfiTGP08N33fc/1kRLS1lK91JQxkycZIzcbmhs93a7iTOuro3ecoWBrr5ywZE4
    xOfVrcGnZKwSnigMTlwScxp5hUPjUJMtNkWaVGfDzCZwLRmcqw3G1oAUVR5WsXIcZN/30sbCOf3odx3z
    g1T2oFJoRPQKStD8GkJX2m3EgvIdXZbRPBjS/2giE5UYIE+iVPW4RZpFDS3JMWKTLqGfh3qLECpjupsM
    mqUy5qrNgJRAdRPdZJQCxJa4EjX5ZfcovMbeWeRIA3Sc/Fjr6x/vjxPk6dn+lvrl1l/3q5/y3/6eDen+
    ATq3x4Q=''' )


util.run( main, unittest )
