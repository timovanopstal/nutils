#! /usr/bin/env python

from nutils import *


@log.title
def makeplots( domain, geom, greysmooth, index, indicator ):

  points, fval, xgrad, indic = domain.elem_eval( [ geom, greysmooth, greysmooth.grad(geom)[0], indicator ], ischeme='bezier4', separate=True )

  with plot.PyPlot( 'fval', index=index ) as plt:
    plt.mesh( points, fval, triangulate='bezier' )
    plt.clim( -1, 1 )
    plt.colorbar()

  with plot.PyPlot( 'xgrad', index=index ) as plt:
    plt.mesh( points, xgrad, triangulate='bezier' )
    plt.clim( 0, 18 )
    plt.colorbar()

  with plot.PyPlot( 'indicator', index=index ) as plt:
    plt.mesh( points, indic, triangulate='bezier' )
    plt.colorbar()


def main( degree=2, niter=30, triangular=False, plot=True ):

  if triangular:
    if degree != 1:
      log.warning( 'warning: setting degree to 1 for triangles' )
      degree = 1
    domain, geom = mesh.demo()
  else:
    domain, geom = mesh.rectilinear( [ (0,.5,1) ] * 2 )

  greydata = function.tanh( ( function.norm2(geom) - .5 ) * 20 )

  for iiter in log.range( 'iter', niter ):

    funcsp = domain.splinefunc( degree=degree )
    greysmooth = domain.projection( greydata, geometry=geom, onto=funcsp, ischeme='gauss3', droptol=0, verify=int(funcsp.shape[0]) )
    indicator = ( greysmooth - greydata )**2

    weighted_residual = domain.integrate( funcsp * indicator, geometry=geom, ischeme='gauss3' )
    refine = weighted_residual.argsort()[-1:]
    supp = function.supp( funcsp, indices=refine )

    if plot:
      makeplots( domain, geom, greysmooth, iiter, indicator )

    domain = domain.refined_by( supp )

  return weighted_residual


def unittest():

  retvals = main( degree=1, triangular=True, niter=6, plot=False )
  assert debug.checkdata( retvals, '''
    eNpdj9sNxSAMQ9dppSDlTTJQ91/hQkrRbb8cbHMIBIcC2QkHK/rVCME5ZQzD5uAxEAhGVCRJvQZmoqsF
    GPdRSWAyu1ofTfF/ffxvf4M2ej9mYVVlntpB03CeaSFCJzIhRPS+mS7T0OAswtPYwSJ8yYRoL+3mM1ci
    KbJ6v7fsIYvIWM2lj7+Ljpj1vyCeKEmLOntarZCpr3z55w86vFWy''' )

  retvals = main( degree=1, triangular=False, niter=11, plot=False )
  assert debug.checkdata( retvals, '''
    eNpNkOsNBCEIhNvZS7zE4SkFbf8t3MqCuV8oznwDYlwyoJ9xETTubwwOm/cXNGQu3Q24PBUYxvIo1gBh
    5YP5+9DW4ygBsVsK4MHJPPADPZCjAecTjwiXPGAWJ5bwm6iOTDC2TGwFMPdhDgjlDOoycy0s2vUgWkDO
    ureyoKxsIrsKa6I7qkGtg+C5+7NkIH1suXz7u98j9gDNbT1hZl+XU92Lo3hXs+RxcOZjRfrVnOuTy8er
    vsRTB8g///DK3/rO7ZzDLc6Zp/I7r/mfH0o8fyU=''' )

  retvals = main( degree=2, triangular=False, niter=12, plot=False )
  assert debug.checkdata( retvals, '''
    eNpVVFFuLDEIu04rTaU4QAIH6v2v0CwQz3s/u4jEYGwyeL70gX0/X0DM3594til+fzBP4HaCc9wnvvST
    wKMTJwF5XEVPYC+IR+c/Ci2zr3Q5gu4J8lcsCrCnjCxhe2oWDffIxoaoYCKq31TVuhx7VZ8Lh8fKO9Ap
    iYKNz9F4DmhVRqJaYM9C6VzFjt1fuG5L+BadGcj0nUexk5g8GymEHmLZy17y7E749CUfYQ1J5yRGXjn1
    YDUWAMlAXHbWu6AAtMoNHa1Ol2FmDimZKBwnJ3X2pKYUhVORDuWmXhyYTOkEpaQW7xA2i8ZGVHfH9MrM
    WVu2hlkzzJ06RwL8y/kIpiIZHIKlhqtWHYTWZfOoOljpxAfVBsCw25IoNTBWwRVSGZPurjXXkS5GiRk+
    euu3oFusJravx9s7M1DunIdRNGSkqqfy2lHKX7hp3/HhXij9ND2P8Fh5R0cHvWBLddejoLpXMGrAsUjw
    7ZAmx/lflh+Caw3VpoDUhNNdehcsI8oY+kqrqD4V4Uz0nnbSIapP+SgAF4Xe005aRa2pFreKi0LvX1+v
    Ma+0Y7R+ga4cMppzkzf0qwNc7juUXm7rgvJ5xZ87sw3B7ie64f3dcu9190vee5yjE1/C/r/pW5nwS5V8
    2JSVOQWpkg+bckBOQark8/0HveVc4A==''' )


util.run( main, unittest )
